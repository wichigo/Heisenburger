package com.projet.heisenburger.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class UserTest {

    // Concrete implementation of User for testing purposes
    private static class ConcreteUser extends User {
        public ConcreteUser() {
            super();
        }

        public ConcreteUser(String email, String password) {
            super(email, password);
        }
    }

    @Test
    void testDefaultConstructor() {
        ConcreteUser user = new ConcreteUser();
        assertNotNull(user);
        assertEquals(0, user.getId());
        assertNull(user.getEmail());
        assertNull(user.getPassword());
    }

    @Test
    void testParameterizedConstructor() {
        ConcreteUser user = new ConcreteUser("test@example.com", "password123");
        assertNotNull(user);
        assertEquals(0, user.getId()); // ID is generated by DB, so it's 0 by default
        assertEquals("test@example.com", user.getEmail());
        assertEquals("password123", user.getPassword());
    }

    @Test
    void testSettersAndGetters() {
        ConcreteUser user = new ConcreteUser();
        user.setId(1);
        user.setEmail("newemail@example.com");
        user.setPassword("newpassword");

        assertEquals(1, user.getId());
        assertEquals("newemail@example.com", user.getEmail());
        assertEquals("newpassword", user.getPassword());
    }

    @Test
    void testToString() {
        // Since User is abstract and uses DiscriminatorValue, we need to mock it or use a concrete class with it.
        // For simplicity, we'll test the basic parts of toString that don't rely on DiscriminatorValue directly.
        // The actual DiscriminatorValue is handled by JPA and its subclasses.
        ConcreteUser user = new ConcreteUser("test@example.com", "password123");
        user.setId(1);
        String userString = user.toString();
        assertTrue(userString.contains("id=1"));
        assertTrue(userString.contains("email='test@example.com'"));
        assertTrue(userString.contains("userType='N/A'"));
    }
}